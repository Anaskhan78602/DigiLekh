{
  "version": 3,
  "sources": ["../../react-typed/src/index.tsx"],
  "sourcesContent": ["import React, { memo, useMemo, useRef, useEffect } from \"react\";\nimport Typed from \"typed.js\";\nexport interface ReactTypedProps {\n  stopped?: boolean;\n  /**\n   * if true will be initialized in stopped state\n   * @default false\n   * */\n  startWhenVisible?: boolean;\n  /**\n   * Styles for the created element in case children is not provided\n   * */\n  style?: React.CSSProperties;\n  /**\n   * class name for the created element in case children is not provided\n   * */\n  className?: string;\n  /**\n   * In some custom component dom element is not in the ref.current property.\n   * ie an Input by antd the element is in input property ( ref.current.input )\n   * you can use this function to get the element from the ref\n   * @default (ref)=>ref.current\n   * */\n  parseRef?: (ref: React.RefObject<any>) => HTMLElement;\n  /**\n   * Returns the typed instance\n   * */\n  typedRef?: (typed: Typed) => void;\n  /**\n   * strings to be typed\n   * @default [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ]\n   * */\n  children?: React.ReactElement;\n  strings?: string[];\n  /**\n   * ID or instance of HTML element of element containing string children\n   * @default null\n   */\n  stringsElement?: string | Element;\n  /**\n   * type speed in milliseconds\n   * @default 0\n   */\n  typeSpeed?: number;\n  /**\n   * time before typing starts in milliseconds\n   * @default 0\n   */\n  startDelay?: number;\n  /**\n   * backspacing speed in milliseconds\n   * @default 0\n   */\n  backSpeed?: number;\n  /**\n   * only backspace what doesn't match the previous string\n   * @default true\n   */\n  smartBackspace?: boolean;\n  /**\n   * shuffle the strings\n   * @default true\n   */\n  shuffle?: boolean;\n  /**\n   * time before backspacing in milliseconds\n   * @default 700\n   */\n  backDelay?: number;\n  /**\n   * Fade out instead of backspace\n   * @default false\n   */\n  fadeOut?: boolean;\n  /**\n   * css class for fade animation\n   * @default typed-fade-out\n   */\n  fadeOutClass?: string;\n  /**\n   * Fade out delay in milliseconds\n   * @default 500\n   */\n  fadeOutDelay?: number;\n  /**\n   * loop strings\n   * @default false\n   */\n  loop?: boolean;\n  /**\n   * amount of loops\n   * @default Infinity\n   */\n  loopCount?: number;\n  /**\n   * show cursor\n   * @default true\n   */\n  showCursor?: boolean;\n  /**\n   * character for cursor\n   * @default |\n   */\n  cursorChar?: string;\n  /**\n   * insert CSS for cursor and fadeOut into HTML\n   * @default true\n   */\n  autoInsertCss?: boolean;\n  /**\n   * attribute for typing Ex: input placeholder, value, or just HTML text\n   * @default null\n   */\n  attr?: string;\n  /**\n   * bind to focus and blur if el is text input\n   * @default false\n   */\n  bindInputFocusEvents?: boolean;\n  /**\n   * 'html' or 'null' for plaintext\n   * @default html\n   */\n  contentType?: string;\n  /**\n   * Before it begins typing the first string\n   */\n  onBegin?: (self: Typed) => number;\n  /**\n   * All typing is complete\n   */\n  onComplete?(self: Typed): void;\n  /**\n   * Before each string is typed\n   */\n  preStringTyped?(arrayPos: number, self: Typed): void;\n  /**\n   * After each string is typed\n   */\n  onStringTyped?(arrayPos: number, self: Typed): void;\n  /**\n   * During looping, after last string is typed\n   */\n  onLastStringBackspaced?(self: Typed): void;\n  /**\n   * Typing has been stopped\n   */\n  onTypingPaused?(arrayPos: number, self: Typed): void;\n  /**\n   * Typing has been started after being stopped\n   */\n  onTypingResumed?(arrayPos: number, self: Typed): void;\n  /**\n   * After reset\n   */\n  onReset?(self: Typed): void;\n  /**\n   * After stop\n   */\n  onStop?(arrayPos: number, self: Typed): void;\n  /**\n   * After start\n   */\n  onStart?(arrayPos: number, self: Typed): void;\n  /**\n   * After destroy\n   */\n  onDestroy?(self: Typed): void;\n}\n\nexport const ReactTyped: React.FC<ReactTypedProps> = memo(\n  ({\n    style,\n    className,\n    typedRef,\n    parseRef,\n    stopped,\n    children,\n    startWhenVisible,\n    ...typedOptions\n  }) => {\n    const rootElement = useRef<any>(null);\n    const shouldUpdateArgs = useMemo(\n      () => [\n        ...Object.values(typedOptions).filter(\n          (v) =>\n            typeof v === \"boolean\" ||\n            typeof v === \"number\" ||\n            typeof v === \"string\"\n        ),\n        typedOptions.strings?.join(\",\"),\n      ],\n      [typedOptions]\n    );\n    useEffect(() => {\n      const element =\n        (parseRef && parseRef(rootElement)) || rootElement.current;\n      const typed = new Typed(element, { ...typedOptions });\n\n      if (stopped || startWhenVisible) {\n        typed?.stop();\n      }\n\n      if (startWhenVisible) {\n        const observer = new IntersectionObserver(([entry]) => {\n          if (entry.isIntersecting) {\n            typed?.start();\n            observer.disconnect();\n          }\n        });\n        observer.observe(element);\n      }\n\n      if (typedRef && typed) {\n        typedRef(typed);\n      }\n      return () => {\n        typed.destroy();\n      };\n    }, shouldUpdateArgs);\n\n    const child = !children ? (\n      <span style={style} className={className} ref={rootElement} />\n    ) : (\n      React.cloneElement(children, {\n        ref: rootElement,\n      })\n    );\n    return child;\n  }\n);\n\nexport { Typed };\n"],
  "mappings": ";;;;;;;;;;;AAAA,mBAAwD;AAmLjD,IAAM,iBAAwC,mBACnD,CAAC,EACC,OACA,WACA,UACA,UAAU,cACV,SACA,UACA,kBACA,GAAG,aAAY,MACZ;AACH,QAAM,kBAAc,qBAAY,IAAI;AACpC,QAAM,uBAAmB,sBACvB,MAAG;AAhMT;AAgMY;MACJ,GAAG,OAAO,OAAO,YAAY,EAAE,OAC7B,CAAC,MACC,OAAO,MAAM,aACb,OAAO,MAAM,YACb,OAAO,MAAM,QAAQ;OAEzB,kBAAa,YAAb,mBAAsB,KAAK;;KAE7B,CAAC,YAAY,CAAC;AAEhB,8BAAU,MAAK;AACb,UAAM,UACH,gBAAgB,aAAa,WAAW,KAAM,YAAY;AAC7D,UAAM,QAAQ,IAAI,EAAM,SAAS,EAAE,GAAG,aAAY,CAAE;AAEpD,QAAI,WAAW,kBAAkB;AAC/B,qCAAO;IACT;AAEA,QAAI,kBAAkB;AACpB,YAAM,WAAW,IAAI,qBAAqB,CAAC,CAAC,KAAK,MAAK;AACpD,YAAI,MAAM,gBAAgB;AACxB,yCAAO;AACP,mBAAS,WAAU;QACrB;MACF,CAAC;AACD,eAAS,QAAQ,OAAO;IAC1B;AAEA,QAAI,YAAY,OAAO;AACrB,eAAS,KAAK;IAChB;AACA,WAAO,MAAK;AACV,YAAM,QAAO;IACf;EACF,GAAG,gBAAgB;AAEnB,QAAM,QAAQ,CAAC,WACb,aAAAA,QAAA,cAAA,QAAA,EAAM,OAAc,KAAK,YAAW,CAAA,IAEpC,aAAAA,QAAM,aAAa,UAAU;IAC3B,KAAK;GACN;AAEH,SACE,aAAAA,QAAA,cAAA,QAAA,EAAM,OAAc,WAAoB,eAAc,cAAa,GAChE,KAAK;AAGZ,CAAC;",
  "names": ["React"]
}
